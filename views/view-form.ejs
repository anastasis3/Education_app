// Fixed route handler for viewing forms
app.get('/view-form/:id', async (req, res) => {
  if (!req.session.user) {
    return res.status(403).send('Access denied');
  }

  const formId = req.params.id;
  const userId = req.session.user.id;

  try {
    // Get form information
    const formResult = await pool.query(
      'SELECT * FROM form_templates WHERE id = $1',
      [formId]
    );

    if (formResult.rowCount === 0) {
      return res.status(404).send('Form not found');
    }

    const form = formResult.rows[0];

    // Check if user has access (either teacher who created it or student assigned to it)
    let hasAccess = false;
    
    if (req.session.user.role === 'teacher' && form.teacher_id === userId) {
      hasAccess = true;
    } else if (req.session.user.role === 'student') {
      // Check if student is assigned to this form
      const assignmentResult = await pool.query(
        'SELECT 1 FROM form_assignments WHERE form_id = $1 AND user_id = $2',
        [formId, userId]
      );
      hasAccess = assignmentResult.rowCount > 0;
    }

    if (!hasAccess) {
      return res.status(403).send('Access denied');
    }

    // Get questions for this form
    const questionsResult = await pool.query(
      'SELECT * FROM questions WHERE form_id = $1 AND is_active = true ORDER BY question_order',
      [formId]
    );

    // Use the simple template instead of the results template
    res.render('view-form-simple', {
      form,
      questions: questionsResult.rows,
      user: req.session.user
    });

  } catch (err) {
    console.error('Error viewing form:', err);
    res.status(500).send('Server error');
  }
});

// Alternative: If you want to keep using the same template, 
// you need to provide ALL the variables it expects:
app.get('/view-form/:id', async (req, res) => {
  if (!req.session.user) {
    return res.status(403).send('Access denied');
  }

  const formId = req.params.id;
  const userId = req.session.user.id;

  try {
    // Get form information
    const formResult = await pool.query(
      'SELECT * FROM form_templates WHERE id = $1',
      [formId]
    );

    if (formResult.rowCount === 0) {
      return res.status(404).send('Form not found');
    }

    const form = formResult.rows[0];

    // Get questions
    const questionsResult = await pool.query(
      'SELECT * FROM questions WHERE form_id = $1 AND is_active = true ORDER BY question_order',
      [formId]
    );

    // If you want to use the same template, provide ALL required variables
    res.render('view-form', {
      form,
      studentId: userId,
      studentName: req.session.user.name || 'Unknown',
      studentEmail: req.session.user.email,
      answers: [], // Empty answers for preview
      grade: null, // No grade for preview
      assignedStudents: [], // Empty for preview
      totalQuestions: questionsResult.rows.length,
      responseCount: 0,
      averageGrade: null,
      submissionDate: null,
      user: req.session.user
    });

  } catch (err) {
    console.error('Error viewing form:', err);
    res.status(500).send('Server error');
  }
});